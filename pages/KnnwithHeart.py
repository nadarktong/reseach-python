from sklearn.neighbors import KNeighborsClassifier
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

st.title('‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ K-Nearest Neighbor (KNN)')

# ‡πÇ‡∏´‡∏•‡∏î dataset
dt = pd.read_csv("./data/Website Phishing.csv")

st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å 10 ‡πÅ‡∏ñ‡∏ß")
st.write(dt.head(10))

st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 10 ‡πÅ‡∏ñ‡∏ß")
st.write(dt.tail(10))

# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.write(dt.describe())

# ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.subheader("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
feature = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", dt.columns[:-1])

# ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü boxplot
st.write(f"### üéØ Boxplot: {feature} ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
fig, ax = plt.subplots()
sns.boxplot(data=dt, x='Result', y=feature, ax=ax)
st.pyplot(fig)

# Pairplot
if st.checkbox("‡πÅ‡∏™‡∏î‡∏á Pairplot (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)"):
    st.write("### üå∫ Pairplot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    fig2 = sns.pairplot(dt, hue='Result')
    st.pyplot(fig2)

st.subheader("üîé ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")

# ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
sfh = st.number_input('SFH (‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°, -1, 0, 1)', -1, 1, 0)
popup_window = st.number_input('popUpWidnow (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û, -1, 0, 1)', -1, 1, 0)
ssl_final_state = st.number_input('SSLfinal_State (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SSL, -1, 0, 1)', -1, 1, 0)
request_url = st.number_input('Request_URL (‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ URL, -1, 0, 1)', -1, 1, 0)
url_of_anchor = st.number_input('URL_of_Anchor (‡∏•‡∏¥‡∏á‡∏Å‡πå Anchor, -1, 0, 1)', -1, 1, 0)
web_traffic = st.number_input('web_traffic (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡πÄ‡∏ß‡πá‡∏ö, -1, 0, 1)', -1, 1, 0)
url_length = st.number_input('URL_Length (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß URL, -1, 0, 1)', -1, 1, 0)
age_of_domain = st.number_input('age_of_domain (‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡πÄ‡∏°‡∏ô, -1, 0, 1)', -1, 1, 0)
having_ip_address = st.number_input('having_IP_Address (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ IP Address ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà, 0, 1)', 0, 1, 0)

if st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
    # ‡πÅ‡∏¢‡∏Å features/target
    X = dt.drop('Result', axis=1)
    y = dt['Result']

    # ‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN
    Knn_model = KNeighborsClassifier(n_neighbors=3)
    Knn_model.fit(X, y)  
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á input
    x_input = np.array([[sfh, popup_window, ssl_final_state,
                         request_url, url_of_anchor, web_traffic,
                         url_length, age_of_domain, having_ip_address]])
    
    out = Knn_model.predict(x_input)

    label_map = {-1: "Suspicious", 0: "Legitimate", 1: "Phishing"}
    st.write(f"### ‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {label_map.get(out[0], 'Unknown')}")
else:
    st.write("‚è≥ ‡∏£‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")